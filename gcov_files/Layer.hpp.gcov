        -:    0:Source:src/Layer.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include<vector>
        -:    3:#include<memory>
        -:    4:#include "Neuron.hpp"
        -:    5:
        -:    6:class Layer{
        -:    7:    public:
        -:    8:
        -:    9:        std:: vector<Neuron> neurons;
        -:   10:        std:: vector<double> last_input;
        -:   11:
function _ZN5LayerC2Eii called 2 returned 100% blocks executed 72%
        2:   12:        Layer(int input_size, int output_size){
call    0 returned 2
call    1 returned 2
        2:   13:            this->neurons = std:: vector<Neuron>();
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:   14:
      112:   15:            for(int i = 0; i < output_size; i++){
branch  0 taken 110
branch  1 taken 2 (fallthrough)
      110:   16:               Neuron n = Neuron(input_size);
call    0 returned 110
branch  1 taken 110 (fallthrough)
branch  2 taken 0 (throw)
      110:   17:               this->neurons.emplace_back(std::move(n));
call    0 returned 110
branch  1 taken 110 (fallthrough)
branch  2 taken 0 (throw)
      110:   18:            }
call    0 returned 110
call    1 never executed
        2:   19:        }
call    0 never executed
call    1 never executed
        -:   20:
function _ZN5LayerD2Ev called 2 returned 100% blocks executed 100%
        2:   21:        ~Layer(){
        -:   22:
        2:   23:        }
call    0 returned 2
call    1 returned 2
        -:   24:        
function _ZN5Layer9zero_gradEv called 600000 returned 100% blocks executed 100%
   600000:   25:        void zero_grad(){
   600000:   26:            int n = this->neurons.size();
        -:   27:
 33600000:   28:            for(int i = 0; i < n; i++){
branch  0 taken 33000000
branch  1 taken 600000 (fallthrough)
 33000000:   29:                this->neurons[i].zero_grad();
call    0 returned 33000000
        -:   30:            }
   600000:   31:        }
        -:   32:
function _ZN5Layer12feed_forwardESt6vectorIdSaIdEE called 620000 returned 100% blocks executed 90%
   620000:   33:        std:: vector<double> feed_forward(std:: vector<double> inputs){
        -:   34:
   620000:   35:            this->last_input = inputs;
call    0 returned 620000
   620000:   36:            int n = this->neurons.size();
   620000:   37:            std:: vector<double> outputs = std:: vector<double>(n);
call    0 returned 620000
        -:   38:
 34720000:   39:            for(int i = 0; i < n; i++){
branch  0 taken 34100000
branch  1 taken 620000 (fallthrough)
 34100000:   40:                outputs[i] = this->neurons[i].feed_forward(inputs);
call    0 returned 34100000
branch  1 taken 34100000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 34100000
        -:   41:            }
        -:   42:
   620000:   43:            return outputs;
        -:   44:
    =====:   45:        }
call    0 never executed
        -:   46:
function _ZN5Layer8backwardESt6vectorIdSaIdEE called 600000 returned 100% blocks executed 89%
   600000:   47:        void backward(std:: vector<double> grad){
   600000:   48:            int n = this->neurons.size();
        -:   49:
 33600000:   50:            for(int i = 0; i < n; i++){
branch  0 taken 33000000
branch  1 taken 600000 (fallthrough)
 33000000:   51:                this->neurons[i].backpropagation(this->last_input, grad[i]);
call    0 returned 33000000
call    1 returned 33000000
branch  2 taken 33000000 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 33000000
call    5 never executed
        -:   52:            }
   600000:   53:        }
        -:   54:
function _ZN5Layer7descendEd called 600000 returned 100% blocks executed 100%
   600000:   55:        void descend(double learning_rate){
   600000:   56:            int n = this->neurons.size();
        -:   57:
 33600000:   58:            for(int i = 0; i < n; i++){
branch  0 taken 33000000
branch  1 taken 600000 (fallthrough)
 33000000:   59:                this->neurons[i].descend(learning_rate);
call    0 returned 33000000
        -:   60:            }
   600000:   61:        }
        -:   62:
        -:   63:};
