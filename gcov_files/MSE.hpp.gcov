        -:    0:Source:src/MSE.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include<vector>
        -:    3:
        -:    4:class MSE{
        -:    5:    public:
        -:    6:
        -:    7:        std:: vector<double> last_input;
        -:    8:        std:: vector<double> last_target;
        -:    9:        std:: vector<double> grad;
        -:   10:
function _ZN3MSEC2Ev called 300000 returned 100% blocks executed 100%
   300000:   11:        MSE(){
call    0 returned 300000
call    1 returned 300000
call    2 returned 300000
        -:   12:
   300000:   13:        }
        -:   14:
function _ZN3MSED2Ev called 300000 returned 100% blocks executed 100%
   300000:   15:        ~MSE(){
        -:   16:
   300000:   17:        }
call    0 returned 300000
call    1 returned 300000
call    2 returned 300000
        -:   18:
function _ZN3MSE12feed_forwardESt6vectorIdSaIdEES2_ called 300000 returned 100% blocks executed 100%
   300000:   19:        double feed_forward(std:: vector<double> inputs, std:: vector<double> targets){
        -:   20:            
   300000:   21:            this->last_input = inputs;
call    0 returned 300000
   300000:   22:            this->last_target = targets;
call    0 returned 300000
        -:   23:
        -:   24:            double sum = 0;
   300000:   25:            int n = inputs.size();
        -:   26:
  3300000:   27:            for(int i = 0; i < n; i++){
branch  0 taken 3000000
branch  1 taken 300000 (fallthrough)
  3000000:   28:                double s = inputs[i] - targets[i];
  3000000:   29:                sum += s * s;
        -:   30:            }
        -:   31:            
   300000:   32:            return sum / n;
        -:   33:        }
        -:   34:
        -:   35:
function _ZN3MSE8backwardEd called 300000 returned 100% blocks executed 100%
   300000:   36:        void backward(double grad){
   300000:   37:            this->grad = std:: vector<double>(this->last_input.size());
call    0 returned 300000
call    1 returned 300000
call    2 returned 300000
   300000:   38:            int n = this->last_input.size();
  3300000:   39:            for(int i = 0; i < n; i++){
branch  0 taken 3000000
branch  1 taken 300000 (fallthrough)
  3000000:   40:                this->grad.at(i) = 2 * (this->last_input.at(i) - this->last_target.at(i)) / this->last_input.size();
call    0 returned 3000000
call    1 returned 3000000
call    2 returned 3000000
  3000000:   41:                this->grad.at(i) *= grad;
call    0 returned 3000000
        -:   42:            }
        -:   43:
   300000:   44:        }
        -:   45:
        -:   46:};
